// license-header java merge-point
//
// Generated by: EasyMockServiceImplTest.vsl in andromda-spring-cartridge.
//
package com.googlecode.ouvidoria.service.demandant;

import static org.easymock.EasyMock.expect;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.googlecode.ouvidoria.TestUtils;
import com.googlecode.ouvidoria.model.demandant.DemandantTypeDao;
import com.googlecode.ouvidoria.model.demandant.IdentificationDao;
import com.googlecode.ouvidoria.model.vo.SimpleVO;

/**
 * <p>
 * Caso de Teste para
 * <code>com.googlecode.ouvidoria.service.demandant.DemandantHelper</code>. Sao
 * criados 2 metodos de teste para cada metodo da classe de servico. Um dos
 * metodos testa valores validos e o outro testa valores invalidos.
 * </p>
 *
 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelperImpl
 */
public class DemandantHelperImplMockTest extends
		AbstractDemandantHelperMockTest {

	// setup logging
	private Log log = LogFactory.getLog(DemandantHelperImplMockTest.class);

	/**
	 * Metodo responsavel por testar o comportamento do metodo GetDemandantTypes
	 * com valores validos.
	 *
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getDemandantTypes()
	 */
	public void testGetDemandantTypes() throws Exception {
		log.info("Metodo: testGetDemandantTypes()");

		/* setup data */
		List list = TestUtils.getSimpleVoList(2);
		System.out.println("******************* testGetDemandantTypes="+list.size());

		/* setup mock */
		expect(this.demandantTypeDaoMock.searchActive(DemandantTypeDao.TRANSFORM_SIMPLEVO)).andReturn(list);

		replayMocks();

		List<SimpleVO> demandantTypes = this.demandantHelper.getDemandantTypes();
		assertNotNull("Resultado inesperado.", demandantTypes);
		assertTrue("Deveria ter retornado 2 itens", demandantTypes.size() == 2);
		
		/* verifies mock */
		verifyMocks();
	}

	
	/**
	 * Metodo responsavel por testar o comportamento do metodo GetDemandantTypes
	 * com valores invalidos.
	 * 
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getDemandantTypes()
	 */
	public void testGetDemandantTypesValoresInvalidos() throws Exception {
		log.info("Metodo: testGetDemandantTypesValoresInvalidos()");

		/* setup data */
		List list = new ArrayList();

		/* setup mock */
		expect(this.demandantTypeDaoMock.searchActive(DemandantTypeDao.TRANSFORM_SIMPLEVO)).andReturn(list);

		replayMocks();

		List<SimpleVO> demandantTypes = this.demandantHelper.getDemandantTypes();
		assertNotNull("Resultado inesperado.", demandantTypes);
		assertTrue("A lista deveria estar vazia", demandantTypes.size() == 0);
		
		/* verifies mock */
		verifyMocks();
	}

	/**
	 * Metodo responsavel por testar o comportamento do metodo
	 * GetIdentificationTypes com valores validos.
	 *
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getIdentificationTypes()
	 */
	public void testGetIdentificationTypes() throws Exception {
		log.info("Metodo: testGetIdentificationTypes()");

		/* setup data */
		List list = TestUtils.getSimpleVoList(2);

		/* setup mock */
		expect(this.identificationDaoMock.searchActive(IdentificationDao.TRANSFORM_SIMPLEVO)).andReturn(list);

		replayMocks();

		List<SimpleVO> identificationTypes = this.demandantHelper.getIdentificationTypes();
		assertNotNull("Resultado inesperado.", identificationTypes);
		assertTrue("Deveria ter retornado 2 itens", identificationTypes.size() == 2);
		
		/* verifies mock */
		verifyMocks();
	}

	/**
	 * Metodo responsavel por testar o comportamento do metodo
	 * GetIdentificationTypes com valores invalidos.
	 * 
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getIdentificationTypes()
	 */
	public void testGetIdentificationTypesValoresInvalidos() throws Exception {
		// exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetIdentificationTypesValoresInvalidos()");

		/* setup data */
		List list = new ArrayList();

		/* setup mock */
		expect(this.identificationDaoMock.searchActive(IdentificationDao.TRANSFORM_SIMPLEVO)).andReturn(list);

		replayMocks();

		List<SimpleVO> identificationTypes = this.demandantHelper.getIdentificationTypes();
		assertNotNull("Resultado inesperado.", identificationTypes);
		assertTrue("A lista deveria estar vazia", identificationTypes.size() == 0);
		
		/* verifies mock */
		verifyMocks();
	}

	/**
	 * Metodo responsavel por testar o comportamento do metodo GetSexTypes com
	 * valores validos.
	 *
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getSexTypes()
	 */
	public void testGetSexTypes() throws Exception {
		log.info("Metodo: testGetSexTypes()");
		//TODO
	}

	/**
	 * Metodo responsavel por testar o comportamento do metodo GetSexTypes com
	 * valores invalidos.
	 * 
	 * @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getSexTypes()
	 */
	public void testGetSexTypesValoresInvalidos() throws Exception {
		log.info("Metodo: testGetSexTypesValoresInvalidos()");
		//TODO
	}

}