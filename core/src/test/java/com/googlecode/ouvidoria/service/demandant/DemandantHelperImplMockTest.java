// license-header java merge-point
//
// Generated by: EasyMockServiceImplTest.vsl in andromda-spring-cartridge.
//
package com.googlecode.ouvidoria.service.demandant;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import static org.easymock.EasyMock.*;
import com.googlecode.ouvidoria.service.demandant.AbstractDemandantHelperMockTest;


/**
* <p>
* Caso de Teste para <code>com.googlecode.ouvidoria.service.demandant.DemandantHelper</code>. 
* Sao criados 2 metodos de teste para cada metodo da classe de servico.
* Um dos metodos testa valores validos e o outro testa valores invalidos.
* </p>
*
* @see com.googlecode.ouvidoria.service.demandant.DemandantHelperImpl
*/
public class DemandantHelperImplMockTest extends AbstractDemandantHelperMockTest {

	//setup logging
	private Log log = LogFactory.getLog(DemandantHelperImplMockTest.class);

				
	/**
	* Metodo responsavel por testar o comportamento do metodo GetDemandantTypes com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getDemandantTypes()
	*/
	public void testGetDemandantTypes() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetDemandantTypes()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo GetDemandantTypes com valores invalidos.

	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getDemandantTypes()
	*/
	public void testGetDemandantTypesValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetDemandantTypesValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo GetIdentificationTypes com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getIdentificationTypes()
	*/
	public void testGetIdentificationTypes() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetIdentificationTypes()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo GetIdentificationTypes com valores invalidos.

	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getIdentificationTypes()
	*/
	public void testGetIdentificationTypesValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetIdentificationTypesValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo GetSexTypes com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getSexTypes()
	*/
	public void testGetSexTypes() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetSexTypes()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo GetSexTypes com valores invalidos.

	* @see com.googlecode.ouvidoria.service.demandant.DemandantHelper#getSexTypes()
	*/
	public void testGetSexTypesValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetSexTypesValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

} 