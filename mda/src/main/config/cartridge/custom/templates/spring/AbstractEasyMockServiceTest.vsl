#set ($generatedFile = "${service.packagePath}/Abstract${service.name}MockTest.java")
##parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: AbstractEasyMockServiceTest.vsl in andromda-spring-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import static org.easymock.EasyMock.*;

#set ($instanceServiceName = $stringUtils.lowerCamelCaseName(${service.name}))

/**
* <p>
* TestCase for <code>$service.fullyQualifiedName</code>, it creates two test methods for each one from the service class.
* </p>
*
* @see ${service.fullyQualifiedName}Impl
*/
public abstract class Abstract${service.name}MockTest extends junit.framework.TestCase {

// Instancia da Classe de Servico a ser Testada.
	protected ${service.fullyQualifiedName}Impl $instanceServiceName;
	
##Declara o proprio servico como mock, caso exista chamadas a ele mesmo
	protected ${service.fullyQualifiedName} ${instanceServiceName}Mock;

//Dependencias da classe
## Declara todas as dependencias a outros servicos como um MockObject.
#foreach($serviceRef in $service.serviceReferences)
	#set ($targetElement = $serviceRef.targetElement)
	protected $targetElement.fullyQualifiedName ${serviceRef.name}Mock;
#end

## Declara todas as dependencias as DAOS como um MockObject.
#foreach($entityRef in $service.entityReferences)
	#set ($targetElement = $entityRef.targetElement)
	protected $targetElement.fullyQualifiedDaoName ${entityRef.daoName}Mock;
#end

## Cria o metodo setUp()
@Override
protected void setUp() throws Exception {
	this.${instanceServiceName} = new ${service.fullyQualifiedName}Impl();
	## Instancia os MOCKS do proprio servico.
	this.${instanceServiceName}Mock = createMock(${service.fullyQualifiedName}.class);
	## Instancia os MOCKS dos servicos.
	#foreach($serviceRef in $service.serviceReferences)
		#set ($targetElement = $serviceRef.targetElement)
		this.${serviceRef.name}Mock = createMock(${targetElement.fullyQualifiedName}.class);
		/* atribui o servico dependente */
		this.${instanceServiceName}.set$stringUtils.upperCamelCaseName(${serviceRef.name})(this.${serviceRef.name}Mock);
	#end
	## Instancia os MOCKS das DAOS
	#foreach($entityRef in $service.entityReferences)
		#set ($targetElement = $entityRef.targetElement)
		this.${entityRef.daoName}Mock = createMock(${targetElement.fullyQualifiedDaoName}.class);
		/* atribui a DAO dependente */
		this.${instanceServiceName}.set$stringUtils.upperCamelCaseName(${entityRef.daoName})(this.${entityRef.daoName}Mock);
	#end
}

## Variavel usada para guardar os nomes das operacoes sobrecarregadas
#set($overloadOperations = "")
#set ($count = 0)
#foreach ($operation in $service.operations)
	#set ($methodName = $stringUtils.upperCamelCaseName(${operation.name}))	
	
	## Logica usada para evitar a duplicacao de operacoes sobrecarregadas.
	#if ($overloadOperations.contains("@${operation.name}@"))
		#set ($count = $count + 1)
		#set ($methodName = "${methodName}${count}")
	#else	
		#set ($overloadOperations = "${overloadOperations}@${operation.name}@")
	#end
		
	/**
	* Metodo responsavel por testar o comportamento do metodo $methodName com valores validos.
	*
	* @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
	*/
	public abstract void test${methodName}() throws Exception;

	/**
	* Metodo responsavel por testar o comportamento do metodo $methodName com valores invalidos.
	* @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
	*/
	public abstract void test${methodName}ValoresInvalidos() throws Exception;


## END FOREACH
#end

/**
* Calls replay() with the current mock objects.
*/
protected void replayMocks() {
#foreach($serviceRef in $service.serviceReferences)
	replay(this.${serviceRef.name}Mock);
#end
#foreach($entityRef in $service.entityReferences)
	replay(this.${entityRef.daoName}Mock);
#end
}

/**
* Verifies the mock objects.
*/
protected void verifyMocks() {
#foreach($serviceRef in $service.serviceReferences)
	verify(this.${serviceRef.name}Mock);
#end
#foreach($entityRef in $service.entityReferences)
	verify(this.${entityRef.daoName}Mock);
#end
}

@Override
protected void tearDown() throws Exception {
	super.tearDown();
}

} 