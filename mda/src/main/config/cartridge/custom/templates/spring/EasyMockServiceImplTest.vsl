#set ($generatedFile = "${service.packagePath}/${service.name}ImplMockTest.java")
##parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Generated by: EasyMockServiceImplTest.vsl in andromda-spring-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import static org.easymock.EasyMock.*;
import ${service.packageName}.Abstract${service.name}MockTest;

#set ($instanceServiceName = $stringUtils.lowerCamelCaseName(${service.name}))

/**
* <p>
* Caso de Teste para <code>$service.fullyQualifiedName</code>. 
* Sao criados 2 metodos de teste para cada metodo da classe de servico.
* Um dos metodos testa valores validos e o outro testa valores invalidos.
* </p>
*
* @see ${service.fullyQualifiedName}Impl
*/
public class ${service.name}ImplMockTest extends Abstract${service.name}MockTest {

	//setup logging
	private Log log = LogFactory.getLog(${service.name}ImplMockTest.class);

## Variavel usada para guardar os nomes das operacoes sobrecarregadas
#set($overloadOperations = "")
#foreach ($operation in $service.operations)
	## Logica usada para evitar a duplicacao de operacoes sobrecarregadas.
	#if (!$overloadOperations.contains("@${operation.name}@"))
		#set ($overloadOperations = "${overloadOperations}@${operation.name}@")
		#set ($methodName = $stringUtils.upperCamelCaseName(${operation.name}))
		
	/**
	* Metodo responsavel por testar o comportamento do metodo $methodName com valores validos.
	*
	* @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
	*/
	public void test${methodName}() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: test${methodName}()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo $methodName com valores invalidos.

	* @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
	*/
	public void test${methodName}ValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: test${methodName}ValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
## END IF
#end
## END FOREACH
#end

} 