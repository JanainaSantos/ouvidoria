// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/08/2014 16:36:59-0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.googlecode.ouvidoria.model.complaint;

import com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO;
import com.googlecode.ouvidoria.model.complaint.vo.SimpleComplaintVO;

/**
 * @see Complaint
 */
public class ComplaintDaoImpl
    extends ComplaintDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toSimpleComplaintVO(
        Complaint source,
        SimpleComplaintVO target)
    {
        // TODO verify behavior of toSimpleComplaintVO
        super.toSimpleComplaintVO(source, target);
        // WARNING! No conversion for target.date (can't convert source.getDate():java.util.Date to java.util.Date
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SimpleComplaintVO toSimpleComplaintVO(final Complaint entity)
    {
        // TODO verify behavior of toSimpleComplaintVO
        return super.toSimpleComplaintVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
        private Complaint loadComplaintFromSimpleComplaintVO(SimpleComplaintVO vo)
    {
    	        Complaint retorno = null;
		if(vo.getId() == null){
			retorno = Complaint.Factory.newInstance();
		}else{
			retorno = load(vo.getId());
		}
		return retorno;	
		
        // TODO implement loadComplaintFromSimpleComplaintVO
        //throw new UnsupportedOperationException("com.googlecode.ouvidoria.model.complaint.loadComplaintFromSimpleComplaintVO(SimpleComplaintVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (simpleComplaintVO.getId() == null)
        {
            return  Complaint.Factory.newInstance();
        }
        else
        {
            return this.load(simpleComplaintVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Complaint simpleComplaintVOToEntity(SimpleComplaintVO simpleComplaintVO)
    {
        // TODO verify behavior of simpleComplaintVOToEntity
        Complaint entity = this.loadComplaintFromSimpleComplaintVO(simpleComplaintVO);
        this.simpleComplaintVOToEntity(simpleComplaintVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void simpleComplaintVOToEntity(
        SimpleComplaintVO source,
        Complaint target,
        boolean copyIfNull)
    {
        // TODO verify behavior of simpleComplaintVOToEntity
        super.simpleComplaintVOToEntity(source, target, copyIfNull);
        // No conversion for target.date (can't convert source.getDate():java.util.Date to java.util.Date
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toComplaintVO(
        Complaint source,
        ComplaintVO target)
    {
        // TODO verify behavior of toComplaintVO
        super.toComplaintVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComplaintVO toComplaintVO(final Complaint entity)
    {
        // TODO verify behavior of toComplaintVO
        return super.toComplaintVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
        private Complaint loadComplaintFromComplaintVO(ComplaintVO vo)
    {
    	        Complaint retorno = null;
		if(vo.getId() == null){
			retorno = Complaint.Factory.newInstance();
		}else{
			retorno = load(vo.getId());
		}
		return retorno;	
		
        // TODO implement loadComplaintFromComplaintVO
        //throw new UnsupportedOperationException("com.googlecode.ouvidoria.model.complaint.loadComplaintFromComplaintVO(ComplaintVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (complaintVO.getId() == null)
        {
            return  Complaint.Factory.newInstance();
        }
        else
        {
            return this.load(complaintVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Complaint complaintVOToEntity(ComplaintVO complaintVO)
    {
        // TODO verify behavior of complaintVOToEntity
        Complaint entity = this.loadComplaintFromComplaintVO(complaintVO);
        this.complaintVOToEntity(complaintVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void complaintVOToEntity(
        ComplaintVO source,
        Complaint target,
        boolean copyIfNull)
    {
        // TODO verify behavior of complaintVOToEntity
        super.complaintVOToEntity(source, target, copyIfNull);
    }
}