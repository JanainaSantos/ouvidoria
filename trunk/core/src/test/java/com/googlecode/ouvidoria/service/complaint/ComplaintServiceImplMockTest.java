// license-header java merge-point
//
// Generated by: EasyMockServiceImplTest.vsl in andromda-spring-cartridge.
//
package com.googlecode.ouvidoria.service.complaint;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import static org.easymock.EasyMock.*;
import com.googlecode.ouvidoria.service.complaint.AbstractComplaintServiceMockTest;


/**
* <p>
* Caso de Teste para <code>com.googlecode.ouvidoria.service.complaint.ComplaintService</code>. 
* Sao criados 2 metodos de teste para cada metodo da classe de servico.
* Um dos metodos testa valores validos e o outro testa valores invalidos.
* </p>
*
* @see com.googlecode.ouvidoria.service.complaint.ComplaintServiceImpl
*/
public class ComplaintServiceImplMockTest extends AbstractComplaintServiceMockTest {

	//setup logging
	private Log log = LogFactory.getLog(ComplaintServiceImplMockTest.class);

				
	/**
	* Metodo responsavel por testar o comportamento do metodo Save com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#save(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testSave() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testSave()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo Save com valores invalidos.

	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#save(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testSaveValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testSaveValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo CheckStatus com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#checkStatus(java.lang.Long, java.lang.String)
	*/
	public void testCheckStatus() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testCheckStatus()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo CheckStatus com valores invalidos.

	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#checkStatus(java.lang.Long, java.lang.String)
	*/
	public void testCheckStatusValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testCheckStatusValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo Get com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#get(java.lang.Long)
	*/
	public void testGet() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGet()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo Get com valores invalidos.

	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#get(java.lang.Long)
	*/
	public void testGetValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testGetValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo Search com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#search(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testSearch() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testSearch()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo Search com valores invalidos.

	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#search(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testSearchValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testSearchValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}
				
	/**
	* Metodo responsavel por testar o comportamento do metodo Validate com valores validos.
	*
	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#validate(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testValidate() throws Exception {

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testValidate()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

	/**
	* Metodo responsavel por testar o comportamento do metodo Validate com valores invalidos.

	* @see com.googlecode.ouvidoria.service.complaint.ComplaintService#validate(com.googlecode.ouvidoria.model.complaint.vo.ComplaintVO)
	*/
	public void testValidateValoresInvalidos() throws Exception
	{

		//exibe o nome do metodo de teste sendo executado
		log.info("Metodo: testValidateValoresInvalidos()");
	
		/* setup data */
		/**
		* TODO aqui sao criados, caso necessario, os objetos necessarios para setar os metodos dos mocks
		*/

		/* setup mock */
		/**
		* TODO aqui vao as definicoes dos metodos dos mock que serao chamados. 
		* Tambem os expects sao declarados neste ponto.
		* Ex.: expect(this.objetoMock.metodoFake(param1, param2)).andReturn(ret);
		**/
		replayMocks();

		/**
		* TODO implementar a logica do teste
		*/
		//fail("Implementar a logica do teste");
	
		/* verifies mock */
		verifyMocks();
	}

} 