<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Generated by: applicationContext-testDataSource.xml.vsl in andromda-spring-cartridge. -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/lang 
		http://www.springframework.org/schema/lang/spring-lang-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<context:annotation-config />
	
	<!-- ========================= DATASOURCE DEFINITION ========================= -->

    <!-- Local DataSource that works in any environment -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="username" value="pedro"/>
        <property name="password" value="123"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/bd_ouvidoria_test"/>
    </bean>

    <!-- ====================== End of DATASOURCE DEFINITION ====================== -->


    <!-- ========================= GENERAL DEFINITIONS ========================= -->

    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename"><value>messages</value></property>
    </bean>

    <!-- applicationContext merge-point -->
    <bean id="hibernateMappingLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <!-- applicationContext hibernateMappingLocations merge-point -->
                <value>classpath:com/googlecode/ouvidoria/model/complaint/Complaint.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/complaint/ComplaintType.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/complaint/Subject.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/locality/State.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/locality/City.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/demandant/Demandant.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/demandant/DemandantType.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/demandant/Identification.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/user/User.hbm.xml</value>
                <value>classpath:com/googlecode/ouvidoria/model/user/Role.hbm.xml</value>
            </list>
         </property>
    </bean>

    <bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.default_batch_fetch_size">16</prop>
                				<prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
                <prop key="hibernate.cache.query_cache_factory">org.hibernate.cache.StandardQueryCacheFactory</prop>
                <!-- applicationContext hibernateProperties merge-point -->
            </props>
        </property>
    </bean>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mappingLocations" ref="hibernateMappingLocations"/>
        <property name="hibernateProperties" ref="hibernateProperties"/>
        <!-- applicationContext sessionFactory merge-point -->
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
 
    <!-- Translates Hibernate exceptions to Spring Data Access Exceptions -->
    <bean class="org.springframework.orm.hibernate4.HibernateExceptionTranslator"/>

    <bean id="com.googlecode.ouvidoria.model.complaint.ComplaintDaoImpl" class="com.googlecode.ouvidoria.model.complaint.ComplaintDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getComplaintTypeDao" bean="complaintTypeDao"/>
        <lookup-method name="getSubjectDao" bean="subjectDao"/>
        <lookup-method name="getDemandantDao" bean="demandantDao"/>
        <!-- Complaint entity property merge-point -->
    </bean>

    <!-- Complaint Entity Proxy with inner Complaint Entity implementation -->
    <bean id="complaintDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.complaint.ComplaintDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.complaint.ComplaintDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.complaint.ComplaintTypeDaoImpl" class="com.googlecode.ouvidoria.model.complaint.ComplaintTypeDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- ComplaintType entity property merge-point -->
    </bean>

    <!-- ComplaintType Entity Proxy with inner ComplaintType Entity implementation -->
    <bean id="complaintTypeDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.complaint.ComplaintTypeDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.complaint.ComplaintTypeDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.complaint.SubjectDaoImpl" class="com.googlecode.ouvidoria.model.complaint.SubjectDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- Subject entity property merge-point -->
    </bean>

    <!-- Subject Entity Proxy with inner Subject Entity implementation -->
    <bean id="subjectDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.complaint.SubjectDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.complaint.SubjectDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.locality.StateDaoImpl" class="com.googlecode.ouvidoria.model.locality.StateDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- State entity property merge-point -->
    </bean>

    <!-- State Entity Proxy with inner State Entity implementation -->
    <bean id="stateDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.locality.StateDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.locality.StateDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.locality.CityDaoImpl" class="com.googlecode.ouvidoria.model.locality.CityDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- City entity property merge-point -->
    </bean>

    <!-- City Entity Proxy with inner City Entity implementation -->
    <bean id="cityDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.locality.CityDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.locality.CityDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.demandant.DemandantDaoImpl" class="com.googlecode.ouvidoria.model.demandant.DemandantDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getDemandantTypeDao" bean="demandantTypeDao"/>
        <lookup-method name="getIdentificationDao" bean="identificationDao"/>
        <lookup-method name="getCityDao" bean="cityDao"/>
        <!-- Demandant entity property merge-point -->
    </bean>

    <!-- Demandant Entity Proxy with inner Demandant Entity implementation -->
    <bean id="demandantDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.demandant.DemandantDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.demandant.DemandantDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.demandant.DemandantTypeDaoImpl" class="com.googlecode.ouvidoria.model.demandant.DemandantTypeDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- DemandantType entity property merge-point -->
    </bean>

    <!-- DemandantType Entity Proxy with inner DemandantType Entity implementation -->
    <bean id="demandantTypeDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.demandant.DemandantTypeDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.demandant.DemandantTypeDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.demandant.IdentificationDaoImpl" class="com.googlecode.ouvidoria.model.demandant.IdentificationDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- Identification entity property merge-point -->
    </bean>

    <!-- Identification Entity Proxy with inner Identification Entity implementation -->
    <bean id="identificationDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.demandant.IdentificationDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.demandant.IdentificationDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.user.UserDaoImpl" class="com.googlecode.ouvidoria.model.user.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- User entity property merge-point -->
    </bean>

    <!-- User Entity Proxy with inner User Entity implementation -->
    <bean id="userDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.user.UserDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.user.UserDao"/>
    </bean>

    <bean id="com.googlecode.ouvidoria.model.user.RoleDaoImpl" class="com.googlecode.ouvidoria.model.user.RoleDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- Role entity property merge-point -->
    </bean>

    <!-- Role Entity Proxy with inner Role Entity implementation -->
    <bean id="roleDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.googlecode.ouvidoria.model.user.RoleDaoImpl"/>
        <property name="proxyInterfaces" value="com.googlecode.ouvidoria.model.user.RoleDao"/>
    </bean>

   
</beans>

